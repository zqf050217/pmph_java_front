<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
          http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.10.2.xsd
          http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">
          
    <!-- 使用cglib进行动态代理 -->
     <aop:aspectj-autoproxy proxy-target-class="true" />
    
    <!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
   <!--  <context:component-scan base-package="com.bc.pmpheep.**">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.context.annotation.Configuration" /> 
    </context:component-scan>  -->
    <!--  <context:component-scan base-package="com.bc.pmpheep.back.shiro.cache"/> -->
    <!--启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描-->
    <context:component-scan base-package="com.bc.pmpheep.back;com.bc.pmpheep.general">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:component-scan base-package="com.bc.pmpheep.websocket"/>
    <context:component-scan base-package="com.bc.pmpheep.back.commuser"/>
    <context:component-scan base-package="com.bc.pmpheep.utils"/>
    <!-- 加载属性文件 -->
    <context:property-placeholder location="classpath:spring/spring.properties" ignore-unresolvable="true" />
    
    <!-- dataSource 配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 数据源驱动类可不写， Druid 默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${sql.driverClassName}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${sql.url}" />
        <property name="username" value="${sql.username}" />
        <property name="password" value="${sql.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${sql.initialSize}" />
        <property name="minIdle" value="${sql.minIdle}" />
        <property name="maxActive" value="${sql.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${sql.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${sql.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${sql.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${sql.validationQuery}" />
        <property name="testWhileIdle" value="${sql.testWhileIdle}" />
        <property name="testOnBorrow" value="${sql.testOnBorrow}" />
        <property name="testOnReturn" value="${sql.testOnReturn}" />
    </bean>
    
    <!-- MyBatis 集成 Spring 必须配置的项 1 、配置 SqlSessionFactory 实例 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 扫描 sql 配置文件，即 mapper 对应的 xml 文件 -->
        <property name="mapperLocations" value="classpath:com/bc/pmpheep/**/dao/*.xml" />
        <!-- 扫描 entity 包，这样在 mapper 中就可以使用简单类名，多个用 ; 隔开 -->
        <property name="typeAliasesPackage" value="com.bc.pmpheep.back" />
        <!-- 配置 MyBatis 全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
    </bean>
    <!-- MyBatis 集成 Spring 必须配置的项 2，可以不配置 id  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 给出须要被扫描的 Dao 接口-->
        <property name="basePackage" value="com.bc.pmpheep.back.*.*.dao" />
        <!-- 注入 SqlSessionFactory -->
        <!-- 这是推荐配置的项，不要去配置 sqlSessionFactory ，已经被弃用了-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
    <!-- 支持注解方式声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*" />
            <!-- get*,find*，select*开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="select*" read-only="true" />
            <!-- 对insert,update,delete,add 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="batch*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED" />
            <tx:method name="delete*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED" />
            <tx:method name="update*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED" />
            <tx:method name="add*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED" />
            <tx:method name="insert*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    
    <bean id="responseBeanAop" class="com.bc.pmpheep.controller.bean.ResponseBeanAop" />
    
    <!-- 事务入口 -->
    <aop:config>
        <aop:pointcut id="allServiceMethod"  expression="execution(* com.bc.pmpheep.back..service.*.*(..))" />
        <aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" />
        
        <!-- controller responseBean封装拦截 -->
        <aop:aspect  ref="responseBeanAop" order="2">
            <aop:around method="controllerMethodHandler" pointcut="execution(* com.bc.pmpheep.back..controller..*(..))" />
        </aop:aspect>
    </aop:config>
   
    <!--MongoDB-->
    <mongo:mongo replica-set="${mongo.replicaSet}">
        <mongo:options
            connections-per-host="${mongo.connectionsPerHost}"
            threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
            connect-timeout="${mongo.connectTimeout}"
            max-wait-time="${mongo.maxWaitTime}"
            auto-connect-retry="${mongo.autoConnectRetry}"
            socket-keep-alive="${mongo.socketKeepAlive}"
            socket-timeout="${mongo.socketTimeout}"
            slave-ok="${mongo.slaveOk}"
            write-number="${mongo.writeNumber}"
            write-timeout="${mongo.writeTimeout}"
            write-fsync="${mongo.writeFsync}" />
    </mongo:mongo>
    <mongo:db-factory id="mongoDbFactory" dbname="${mongo.dbName}" mongo-ref="mongo" authentication-dbname="admin" username="${mongo.username}" password="${mongo.password}"/>
    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean>
    <mongo:repositories base-package="com.bc.pmpheep.general.dao" />
    <mongo:mapping-converter id="mappingConverter" db-factory-ref="mongoDbFactory" disable-validation="true" />
    <bean id="anotherMongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
    </bean>
    <bean id="gridFsTemplate" class="org.springframework.data.mongodb.gridfs.GridFsTemplate">
        <constructor-arg ref="mongoDbFactory" />
        <constructor-arg ref="mappingConverter"/>
    </bean>
    <!--WebSocket-->
    <websocket:handlers>
        <websocket:mapping path="/springws/websocket" handler="SpringWSHandler"/>
        <websocket:handshake-interceptors>
            <bean class="com.bc.pmpheep.websocket.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
        <websocket:sockjs/>
    </websocket:handlers>
    <bean id="SpringWSHandler" class="com.bc.pmpheep.websocket.SpringWSHandler"/>
    <!-- Velocity -->
    <bean id="velocityConfig" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
                <prop key="resource.loader">file</prop>
                <prop key="file.resource.loader.path">.</prop>
                <prop key="file.resource.loader.class">
                    org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
                </prop>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.endcoding">UTF-8</prop>
            </props>
        </property>
    </bean>
</beans>
